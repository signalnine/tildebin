#!/usr/bin/env python3
# Audit kernel parameters (sysctl) against a baseline configuration

import argparse
import subprocess
import sys
import json
import os


def run_command(cmd):
    """Execute a command and return output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return -1, "", str(e)


def get_sysctl_value(param):
    """Get the current value of a sysctl parameter"""
    returncode, stdout, stderr = run_command("sysctl -n {} 2>/dev/null".format(param))
    if returncode == 0:
        return stdout.strip()
    return None


def get_all_sysctls():
    """Get all sysctl parameters and their current values"""
    returncode, stdout, stderr = run_command("sysctl -a 2>/dev/null")
    if returncode != 0:
        # Check if sysctl command exists
        check_ret, _, _ = run_command("which sysctl")
        if check_ret != 0:
            print("Error: sysctl command not found. This tool requires sysctl to be installed.", file=sys.stderr)
            sys.exit(2)
        print("Error: sysctl command failed", file=sys.stderr)
        sys.exit(2)

    sysctls = {}
    for line in stdout.split('\n'):
        line = line.strip()
        if not line or '=' not in line:
            continue

        # Split on first '=' to handle values with '=' in them
        parts = line.split('=', 1)
        if len(parts) == 2:
            param = parts[0].strip()
            value = parts[1].strip()
            sysctls[param] = value

    return sysctls


def load_baseline(baseline_file):
    """Load baseline configuration from a file"""
    if not os.path.exists(baseline_file):
        print("Error: Baseline file not found: {}".format(baseline_file), file=sys.stderr)
        sys.exit(2)

    baseline = {}
    try:
        with open(baseline_file, 'r') as f:
            for line in f:
                line = line.strip()
                # Skip comments and empty lines
                if not line or line.startswith('#'):
                    continue

                if '=' not in line:
                    continue

                # Split on first '='
                parts = line.split('=', 1)
                if len(parts) == 2:
                    param = parts[0].strip()
                    value = parts[1].strip()
                    baseline[param] = value

        return baseline
    except Exception as e:
        print("Error reading baseline file: {}".format(str(e)), file=sys.stderr)
        sys.exit(2)


def compare_sysctls(current, baseline, verbose=False):
    """Compare current sysctls with baseline"""
    issues = []

    # Check for deviations from baseline
    for param, expected_value in baseline.items():
        actual_value = current.get(param)

        if actual_value is None:
            issues.append({
                'parameter': param,
                'status': 'missing',
                'expected': expected_value,
                'actual': None,
                'message': 'Parameter not found'
            })
        elif actual_value != expected_value:
            issues.append({
                'parameter': param,
                'status': 'mismatch',
                'expected': expected_value,
                'actual': actual_value,
                'message': 'Value mismatch'
            })
        elif verbose:
            # Include matching parameters in verbose mode
            issues.append({
                'parameter': param,
                'status': 'ok',
                'expected': expected_value,
                'actual': actual_value,
                'message': 'Parameter matches baseline'
            })

    # Check for parameters in current that aren't in baseline (if verbose)
    if verbose:
        for param, actual_value in current.items():
            if param not in baseline:
                issues.append({
                    'parameter': param,
                    'status': 'extra',
                    'expected': None,
                    'actual': actual_value,
                    'message': 'Not in baseline'
                })

    return issues


def save_baseline(output_file, sysctls):
    """Save current sysctl values as a baseline file"""
    try:
        with open(output_file, 'w') as f:
            f.write("# Sysctl baseline generated by sysctl_audit.py\n")
            f.write("# Format: parameter=value\n\n")

            for param in sorted(sysctls.keys()):
                f.write("{}={}\n".format(param, sysctls[param]))

        print("Baseline saved to: {}".format(output_file))
        return True
    except Exception as e:
        print("Error saving baseline: {}".format(str(e)), file=sys.stderr)
        return False


def main():
    parser = argparse.ArgumentParser(
        description="Audit kernel parameters (sysctl) against a baseline configuration"
    )
    parser.add_argument("-b", "--baseline",
                        help="Baseline configuration file to compare against")
    parser.add_argument("--save",
                        help="Save current sysctl values as a baseline file")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Show all parameters including matches")
    parser.add_argument("--warn-only", "-w", action="store_true",
                        help="Only show parameters with warnings or mismatches")
    parser.add_argument("--format", choices=["plain", "json"], default="plain",
                        help="Output format (default: plain)")
    parser.add_argument("-p", "--parameter",
                        help="Check a specific parameter")

    args = parser.parse_args()

    # Get all current sysctl values
    current = get_all_sysctls()

    # Handle single parameter lookup
    if args.parameter:
        value = current.get(args.parameter)
        if value is not None:
            if args.format == "json":
                print(json.dumps({args.parameter: value}))
            else:
                print("{} = {}".format(args.parameter, value))
            sys.exit(0)
        else:
            print("Error: Parameter not found: {}".format(args.parameter), file=sys.stderr)
            sys.exit(1)

    # Handle save baseline
    if args.save:
        if save_baseline(args.save, current):
            sys.exit(0)
        else:
            sys.exit(1)

    # Require baseline for comparison
    if not args.baseline:
        print("Error: Please specify --baseline to compare or --save to create a baseline", file=sys.stderr)
        sys.exit(2)

    # Load baseline and compare
    baseline = load_baseline(args.baseline)
    issues = compare_sysctls(current, baseline, verbose=args.verbose)

    # Filter issues if warn-only mode
    if args.warn_only:
        issues = [i for i in issues if i['status'] in ['mismatch', 'missing']]

    # Output results
    if args.format == "json":
        print(json.dumps(issues, indent=2))
    else:
        if not issues:
            print("All sysctl parameters match baseline configuration")
            sys.exit(0)

        print("Sysctl Audit Results:")
        print("=" * 80)
        print()

        # Group by status
        by_status = {}
        for issue in issues:
            status = issue['status']
            if status not in by_status:
                by_status[status] = []
            by_status[status].append(issue)

        # Print issues grouped by status
        status_order = ['mismatch', 'missing', 'extra', 'ok']
        for status in status_order:
            if status not in by_status:
                continue

            if status == 'mismatch':
                print("MISMATCHES (values differ from baseline):")
                print("-" * 80)
            elif status == 'missing':
                print("MISSING (not in current system):")
                print("-" * 80)
            elif status == 'extra':
                print("EXTRA (not in baseline):")
                print("-" * 80)
            elif status == 'ok':
                print("OK (matches baseline):")
                print("-" * 80)

            for issue in by_status[status]:
                symbol = "✓" if status == 'ok' else "✗"
                print("{} {}".format(symbol, issue['parameter']))
                if status != 'ok':
                    print("  Expected: {}".format(issue['expected']))
                    print("  Actual:   {}".format(issue['actual']))
                print()

    # Exit with error if any mismatches or missing parameters
    has_issues = any(i['status'] in ['mismatch', 'missing'] for i in issues)
    sys.exit(1 if has_issues else 0)


if __name__ == "__main__":
    main()
